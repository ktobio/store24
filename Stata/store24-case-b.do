/**********************************************************************************File        : store24-case-b.do  <--- this should be the exact name of THIS documentAuthor      : Kristina Tobio Created     : 15 Nov 2016Modified    : 03 Feb 2017Description : .do file for Store24 Case Part B**********************************************************************************/// these commands prepare your computer for the data and analysis// this finds and closes open log filescapture log close        // this clears Stata's data memory so new data can be loadedclear       // this makes it so you don't have to keep pressing return/enter to scroll through resultsset more off          // this sets memory sizeset mem 100m       // this keeps everything visible on a normal monitor or laptop screenset linesize 200    // cd means "change directory"// you need to change this to the location on your computer where you are storing the .do and data files*cd "/Users/ktobio/Desktop/Jeff/Course/Store24/store24-case/"       // this creates a log file, which will record all of the commands and outputs from this .do file // log files should be placed in a folder named "logs" in your directory log using "logs/store24-case-b", replace// we created a set of variable in Part A of this case, and they may be useful to us now// so, we use our saved dataset*use "data/store24-case-data-new-variables.dta"//use "data/store24-case-data-new-variables.dta" use "data/PA_Store24B_data.dta"// RECREATE ALL THE VARIABLES WE CREATED IN PART A// Benefit of Experience - Creating Standardized Coefficients// Re-run the profit regressionregress profit mtenure ctenure pop comp visibility ped res hours24// Summarize the variable mtenure, then capture the standard deviation in a local (temporary) variable// Note that "sum" is the same command as "summarize"sum mtenurelocal a=r(sd)// Here, we create a standardized coefficient for mtenure // The command _b[VARIABLE] captures the coefficient of VARIABLE in the most recent regressiong sco_mtenure=`a'*_b[mtenure]// We could create standardized coefficients for each of the remaining variables in the regression by retyping these 3 lines 7 more times// Or, we could use a loop, which saves us time and reduced visual clutter in our .do file// This loop takes each variable in the list and runs it through the three lines of code automaticallyforeach var in ctenure pop comp visibility ped res hours24 {sum `var'local a=r(sd)g sco_`var'=`a'*_b[`var']}// Here, we list the values of each our standardized coefficients// A "*" is a wild card, so this command tells Stata to list all the variables that begin with "sco_"list sco_* if _n==1//PART TWO: RELATIVE IMPORTANCE// The incremental R2 can help us to understand the relative importance of variables in the regressionregress profit mtenure ctenure pop comp visibility ped res hours24// The "e()" command allows you to capture regression results and put them into a variable.// Here, we capture the adjusted R2, but you can also capture statistics like the number of observations or the F-statistic// Type "help regress" for more detailg r2_full=e(r2_a)// We will use it to calculate the incremental R2 of mtenureregress profit ctenure pop comp visibility ped res hours24g ir2_mtenure=r2_full-e(r2_a)// We continue to drop variables from the regression in turn, and calculate each incremental R2regress profit mtenure pop comp visibility ped res hours24g ir2_ctenure=r2_full-e(r2_a)regress profit mtenure ctenure comp visibility ped res hours24g ir2_pop=r2_full-e(r2_a)regress profit mtenure ctenure pop visibility ped res hours24g ir2_comp=r2_full-e(r2_a)regress profit mtenure ctenure pop comp ped res hours24g ir2_visibility=r2_full-e(r2_a)regress profit mtenure ctenure pop comp visibility res hours24g ir2_ped=r2_full-e(r2_a)regress profit mtenure ctenure pop comp visibility ped hours24g ir2_res=r2_full-e(r2_a)regress profit mtenure ctenure pop comp visibility ped resg ir2_hours24=r2_full-e(r2_a)// We can examine the incremental R2 for each variable with the folloing commandlist ir2* if _n==1// Explaining Variation in Profit// To determine the percent of variation in profit NOT explined by our model, we subtract the adjusted R2 from 1g unexplained=1-r2_full// To determine the percent of variation in profit explained by people we add the incremental R2 of manager and crew tenuresg people=ir2_mtenure+ir2_ctenure// To determine the percent of variation in profit explained by site, we add the incremental R2 of population, competition,	// store front visibility, pedestrian foot traffic, residential location, and open 24 hours.g site=ir2_pop+ir2_comp+ir2_visibility+ir2_ped+ir2_res+ir2_hours24// To determine overlap, we subtract people and site from the full adjusted R2g overlap=r2_full-people-site// We can examine these results visually with a pie chartgraph pie overlap people site unexplain, plabel(_all percent) title(Explaining Variation in Profit)graph save "figures/pie", replace// PART THREE: DIMINISHING RETURNS// Create a new variable called MT2 that squares the manager tenure termg MT2=mtenure*mtenure // PART B // Walking through Statistics Review// Statistics Review and part of the Teaching Note have slightly different results. // I think TN is using an older version of the dataset in one of its Part B section.// Re-run the profit regression from Part Aregress profit mtenure ctenure pop comp visibility ped res hours24 MT2// Add the service quality variable to the original profit regressionregress profit mtenure ctenure pop comp visibility ped res hours24 MT2 servqual// Add the manager skill variable to the original profit regressionregress profit mtenure ctenure pop comp visibility ped res hours24 MT2 mgrskill// Add both variables to the original profit regressionregress profit mtenure ctenure pop comp visibility ped res hours24 MT2 servqual mgrskill// Part 4: Mediation// Note Parts 1-3 can be found in store24-case-a.do// Step 1: Show that the initial variable is correlated with the incomeregress profit mtenure ctenure pop comp visibility ped res hours24 MT2 mgrskill// Step 2: Show that the initial variable is correlated with the mediatorregress servqual mtenure ctenure pop comp visibility ped res hours24 MT2 mgrskill// Step 3: Show that the mediator affects the outcome variable, controlling for the initial variable.// Step 4: Note whether the initial variable correlates with the outcome variable, controlling for the mediator.regress profit mtenure ctenure pop comp visibility ped res hours24 MT2 servqual mgrskill// Part 5: Controlling for Fixed Effects - Time and Site Variables// This requires the use of a new dataset, so we clear the current dataset from Stata's memory, then insheet the new datasetclearinsheet using "data/store24-case-data-small-sample.csv", names// Determine the relationship between store quality and profitregress profit quality// Control for the time trendregress profit quality year// Control for the three storesregress profit quality year s1 s2 s3// Note that with dummy varibles, one dummy variable must drop out. // If we want to control which variable drops out, we can simply drop it from the regressionregress profit quality year s2 s3// What happens when we add population?regress profit quality year s1 s2 s3 population// Creating a variable showing the linear relationship between the dummies and populationgenerate example=(s1*pop)+(s2*pop)+(s3*pop)// If we take a glance our data with browse, we see population and example are equalbrowse*close browse// Close the browse window by clicking the red X in the upper righthand corner// Alternatively, we can use check they are equal without opening the browse windowcountcount if population==example// Testing how regression analysis treats redundant variablesgenerate q2=quality*2regress profit quality year q2// Showing how "quality squared" is treated differently than "quality times two"replace q2=quality*qualityregress profit quality year q2save "data/store24-case-data-small-sample.dta", replace// closes your loglog close// drops all data from Stata's memoryclear